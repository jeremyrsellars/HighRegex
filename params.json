{"name":"Highregex","tagline":"Higher order regular expressions for IList<T> instead of IList<char> (strings).","body":"# Higher-order Regular Expressions for .Net\r\n\r\nIt is safe to say that one of the most well-known declarative languages is Regex.  \r\n\r\n## So, what is a higher-order Regex?\r\n\r\nThis speaks to the complexity of the data and of the expression.  \r\n\r\n### Let's consider classic Regex.\r\n\r\nThe classic Regex is a great way to find subsequences of characters that match what you're looking for.\r\n\r\nTheir use is simple (if seldom easy): you declare what you're looking for in a sequence of characters (string).\r\n\r\n* `abc` matches the literal characters `a` followed by `b` followed by `c` in `abcdefghijkl...'\r\n* `gr[ea]y` matches either `grey` or `gray` - `g` followed by `r` followed by an `e` or an `a` followed by `y`\r\n* `baa+` matches `baa`, `baaa`, `baaaa`, etc.\r\n* `\\d` matches a single digit character\r\n* `\\d+\\.\\d*` matches one or more digit characters, followed by `.`, followed by 0 or more digits\r\n\r\n\r\n### Data for a Higher-order Regex\r\n\r\nThere are few things as primitive as a `char`.  A string or a token is a higher abstraction than `char`.  An arbitrary datapoint class is higher-order than a `char`.  With HighRegex, you can define reges \r\n\r\n### Expressions for a Higher-order Regex\r\n\r\nIn Functional Programming, \"Higher Order Functions\" are functions that take other functions as a parameter and/or return functions.  Similarly, higher order regular expressions are composed of other regular expressions.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}